<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<style>
    #video-grid{
        display: grid;
        grid-template-columns: repeat(auto-fill, 300px);
        grid-auto-rows: 300px;
        
    }
    video{
        width: 100%;
        height: 100%;
        border-radius: 20px;
    }
</style>
<body>
    <ul id="messages"></ul>
    <input type="text" name="" placeholder="type text here..." id="inputMessage">
    <button id="btnSend">send</button>
    <button id="startCallBtn">Start Call</button>
   <div id="video-grid">

   </div>
</body>

<script src="https://unpkg.com/peerjs@1.5.2/dist/peerjs.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
    
    const socket = io('/');
    const Room_id = "<%= room %>";
    const myPeer = new Peer(undefined,{
        host:'demo-meeting-online-ad03ad609fc3.herokuapp.com',
        port:'',
        path:'/peerjs'
    });
    const peers = {};
    document.getElementById('inputMessage').addEventListener('keypress', function(event) {
        if (event.keyCode === 13) {
            var message = this.value;
            socket.emit('chat message', message);
            this.value = '';
        }
    });
    document.getElementById('btnSend').addEventListener('click',()=>{
        var message = document.getElementById('inputMessage').value;
        console.log(message)
        socket.emit('chat message', message);
        document.getElementById('inputMessage').value = '';
    })
    const videogrid = document.getElementById('video-grid')
    const myvideo = document.createElement('video');
    myvideo.muted = true;

    navigator.mediaDevices.getUserMedia({video:true, audio:true})
    .then(stream=>{
        console.log(stream)
        addVideoStream(myvideo, stream);
        
        myPeer.on('call', function(call){
            call.answer(stream)
            const video = document.createElement('video');
            call.on('stream', remoteStream=>{
                console.log(remoteStream)
                addVideoStream(video, remoteStream)
            },err=>{
                console.log(err)
            })
        })
        socket.on('user-connected',(userId)=>{
            console.log('new user: ',userId)
            const id = localStorage.getItem('userId')
                if(id)
                {
                    connectToNewUser(id, stream)
                    addVideoStream(video, stream)
                }
                else{
                    localStorage.setItem('userId', userId)
                    connectToNewUser(userId, stream)
                }
        })
    })

    var getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
    console.log(getUserMedia)
    myPeer.on('call', function(call) {
        getUserMedia({video: true, audio: true}, function(stream) {
            call.answer(stream); 
            const video = document.createElement('video');
            call.on('stream', function(remoteStream) {
                console.log(remoteStream)
                addVideoStream(video, remoteStream)
            });
            socket.on('user-connected',(userId)=>{
                const id = localStorage.getItem('userId')
                if(id)
                {
                    connectToNewUser(id, stream)
                    addVideoStream(video, stream)
                }
                else{
                    localStorage.setItem('userId', userId)
                    connectToNewUser(userId, stream)
                }
            })
        }, function(err) {
            console.log('Failed to get local stream' ,err);
        });
    });
    socket.on('user-disconnected',(userIdclose)=>{
        console.log('disconnected: ',userIdclose)
        if( peers[userIdclose])
        peers[userIdclose].close()
    })
    socket.on('chat message', function(msg) {
        var li = document.createElement('li');
        li.textContent = msg;
        document.getElementById('messages').appendChild(li);
    });
    socket.on('disconnected', function(msg){
        /*var li = document.createElement('li');
        li.textContent='a client disconnected';
        document.getElementById('messages').appendChild(li);*/
    })
    myPeer.on('open', (id)=>{
        console.log('host: ', id)
        socket.emit('join-room', Room_id, id);
    })
    function connectToNewUser(userId, stream){
        const call = myPeer.call(userId, stream)
        
        const remoteVideo = document.createElement('video');
        call.on('stream', function(remoteStream){
            console.log(remoteStream)
            addVideoStream(remoteVideo, remoteStream)
        })
        call.on('close',()=>{
            remoteVideo.remove()
        })
        peers[userId]=call;
    }
    function addVideoStream(video, stream){
        if(stream){
            video.srcObject = stream;
            video.addEventListener('loadedmetadata',()=>{
                video.play();
            })
            videogrid.append(video);
        }
        else videogrid.removeChild('video');
    }
    
</script>
</html>